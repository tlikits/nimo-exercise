AWSTemplateFormatVersion: 2010-09-09
Description: >-
  nimo-exercise
Transform:
- AWS::Serverless-2016-10-31

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            IdentitySource: "method.request.header.Authorization"  # Auth token source

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: Prod

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGateway
    Properties:
      Description: Example usage plan with a monthly quota of 1000 calls and method-level throttling for /pets GET
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: Prod

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan


  GetCoinCurrentPrice:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-coin-current-price.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      CodeUri: ./dist/handlers
      MemorySize: 128
      Timeout: 100
      Description: Get current price of a specific cryptocurrency that indicate on path parameter and receive an email about the result
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SearchHistoryTable
      - SESCrudPolicy:
          IdentityName: !Ref SESEmailIdentity
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ses:SendEmail'
              - 'ses:SendRawEmail'
            Resource: '*'
      Environment:
        Variables:
          SEARCH_HISTORY_TABLE: !Ref SearchHistoryTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
            Path: /coin/{id}/current
            Method: GET

  GetSearchHistory:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-search-history.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      CodeUri: ./dist/handlers
      MemorySize: 128
      Timeout: 100
      Description: Get cryptocurrency search history
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SearchHistoryTable
      Environment:
        Variables:
          SEARCH_HISTORY_TABLE: !Ref SearchHistoryTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
            Path: /history
            Method: GET

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sign-up.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      CodeUri: ./dist/handlers
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Sid: CognitoUserCreate
            Effect: Allow
            Action:
            - cognito-idp:AdminCreateUser
            Resource: '*'
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signup
            Auth:
              ApiKeyRequired: true
            Method: POST


  CognitoLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cognito-login.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      CodeUri: ./dist/handlers
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt CognitoLambdaExecutionRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          APP_CLIENT_ID: !Ref CognitoUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /login
            Method: POST

  SearchHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: coinId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: coinId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: userId-timestamp-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - coinId
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyAppClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  CognitoLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:InitiateAuth
                  - cognito-idp:AdminInitiateAuth
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"

  SESEmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: "thanchanok.lks@gmail.com"

  SESEmailIdentity2:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: "thanchanok.likitsinsopon@gmail.com"

  SESDomainIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: 'tlikits.com'

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ApiGateway.RestApiId}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type, authorization, accept, x-api-key'"
      AllowOrigin: "'*'"
      AllowCredentials: "'true'"
